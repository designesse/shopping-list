{"version":3,"sources":["CheckableItem/CheckableItem.js","AddEditItem/AddEditItem.js","TypeBox/TypeBox.js","AddEditTypeBox/AddEditTypeBox.js","DisplayOverlay/DisplayOverlay.js","App.js","serviceWorker.js","index.js"],"names":["CheckableItem","_this","this","react_default","a","createElement","className","props","item","name","type","value","onClick","displayOverlay","Component","AddEditItem","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isItemEmptyWarning","updateItem","bind","assertThisInitialized","handleSubmit","event","setState","target","preventDefault","length","addTypeItem","onSubmit","rows","maxLength","onChange","placeholder","TypeBox","list","map","i","src_CheckableItem_CheckableItem","key","src_AddEditItem_AddEditItem","AddEditTypeBox","isTypeEmptyWarning","updateType","addTypeList","DisplayOverlay","category","delete","deleteType","deleteItem","_this2","App","lists","JSON","parse","localStorage","getItem","newType","isDisplayOverlay","toDeleteType","toDeleteItem","push","items","setItem","stringify","splice","j","arguments","undefined","id","src_TypeBox_TypeBox","src_AddEditTypeBox_AddEditTypeBox","src_DisplayOverlay_DisplayOverlay","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cf88796.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CheckableItem extends Component {\n  render() {\n    return (\n      <div className=\"App-checkableItem border\">\n        { this.props.item.name }<input className=\"right\" type=\"submit\" value=\"x\" onClick={() => this.props.displayOverlay(true, this.props.type, this.props.item.name) } />\n      </div>\n    );\n  }\n}\n\nexport default CheckableItem;\n","import React, { Component } from 'react';\n\nclass AddEditItem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      'isItemEmptyWarning': true,\n      'item': '',\n    }\n\n    this.updateItem = this.updateItem.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  updateItem(event) {\n    this.setState({'item': event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if (this.state.item.length === 0) {\n      this.setState({isItemEmptyWarning: true});\n    }\n    else {\n      this.props.addTypeItem(this.props.type, this.state.item);\n      this.setState({'item': ''});  \n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App-AddEditItem\">\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"overflow-hid\">\n            <textarea className=\"fourth-3 h-70px left\" type=\"text\" name=\"type\" rows={2} maxLength=\"30\" onChange={this.updateItem} value={this.state.item} placeholder={this.state.isItemEmptyWarning ? \"Enter item\" : \"\"}></textarea>\n            <button className=\"add fourth-1 h-70px right\" type=\"submit\" value=\"submit\">+</button>\n          </div>\n          <div className=\"bold ex\">30 characters max</div>\n        </form>  \n      </div>\n    );\n  }\n}\n\nexport default AddEditItem;\n","import React, { Component } from 'react';\nimport CheckableItem from '../CheckableItem/CheckableItem';\nimport AddEditItem from '../AddEditItem/AddEditItem';\n\nclass TypeBox extends Component {\n  render() {\n    return (\n      <div className=\"App-TypeBox box\">\n        <h2>{ this.props.list['type'] }<input className=\"right\" type=\"submit\" value=\"x\" onClick={() => this.props.displayOverlay(true, this.props.list['type']) } /></h2>\n        { this.props.list['items'].map((item, i) =>\n          <CheckableItem key={i} item={item} displayOverlay={this.props.displayOverlay} type={this.props.list['type']} />\n        )}\n        <AddEditItem type={this.props.type} addTypeItem={this.props.addTypeItem} />\n      </div>\n    );\n  }\n}\n\nexport default TypeBox;\n","import React, { Component } from 'react';\n\nclass AddEditTypeBox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      'isTypeEmptyWarning': true,\n      'type': '',\n    }\n\n    this.updateType = this.updateType.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  updateType(event) {\n    this.setState({'type': event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if (this.state.type.length === 0) {\n      this.setState({isTypeEmptyWarning: true});\n    }\n    else {\n      this.props.addTypeList(this.state.type);\n      this.setState({'type': ''});  \n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App-AddEditTypeBox box\">\n        <form onSubmit={this.handleSubmit}>\n          <h2><textarea className=\"no-border\" type=\"text\" name=\"type\" rows={3} maxLength=\"30\" onChange={this.updateType} value={this.state.type} placeholder={this.state.isTypeEmptyWarning ? \"Enter type of shopping list\" : \"\"}></textarea></h2>\n          <button className=\"add whole\" type=\"submit\" value=\"submit\">+ Add</button>\n          <span className=\"ex\">ex: Grocery, Thirft Store, Birthday Party ... - <span className=\"bold\">30 characters max</span></span>\n        </form>  \n      </div>\n    );\n  }\n}\n\nexport default AddEditTypeBox;\n","import React, { Component } from 'react';\nimport './DisplayOverlay.css';\n\nclass DisplayOverlay extends Component {\n  constructor(props) {\n    super(props);\n\n    var category = 'item';\n    var name = this.props.item;\n    if (this.props.item==='') {\n      category = 'list';\n      name = this.props.type;\n    }  \n\n    this.state = {\n      'category': category,\n      'name': name,\n    }\n\n    this.delete = this.delete.bind(this);\n  }\n  \n  delete() {\n    this.props.item==='' ? this.props.deleteType() : this.props.deleteItem(); \n  }\n\n  render() {\n    return (\n      <div className=\"App-DisplayOverlay\">\n        <div className=\"message-box\">\n          <div>Do you want to delete the { this.state.category + ' \"' + this.state.name + '\" ' } ?</div>\n          <div className=\"overflow-hid\"><button className=\"button-text left\" onClick={() => this.props.displayOverlay(false)}>Cancel</button><button className=\"button-text right\" onClick={() => this.delete()}>Delete</button></div>  \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DisplayOverlay;\n","import React, { Component } from 'react';\nimport './App.css';\nimport TypeBox from './TypeBox/TypeBox';\nimport AddEditTypeBox from './AddEditTypeBox/AddEditTypeBox';\nimport DisplayOverlay from './DisplayOverlay/DisplayOverlay';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    var lists = JSON.parse(localStorage.getItem('lists')) ? JSON.parse(localStorage.getItem('lists')) : [];\n\n    this.state = {\n      'lists': lists,\n      'newType': '',\n      'isDisplayOverlay': false,\n      'toDeleteType': '',\n      'toDeleteItem': ''\n    }\n\n    this.addTypeList = this.addTypeList.bind(this);\n    this.addTypeItem = this.addTypeItem.bind(this);\n    this.deleteType = this.deleteType.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.displayOverlay = this.displayOverlay.bind(this);\n  }\n\n  addTypeList(type) {\n    var lists = this.state.lists;\n    lists.push({'type': type, 'items': []});\n    this.setState({'lists': lists, 'newType': ''});\n    localStorage.setItem('lists', JSON.stringify(lists));\n  }\n\n  addTypeItem(type, item) {\n    var lists = this.state.lists;\n    for (var i=0; i<lists.length; i++) {\n      if (lists[i]['type'] === type) {\n        var items = lists[i]['items'];\n        items.push({'name': item});\n        lists[i]['items'] = items;\n        this.setState({'lists': lists});\n        localStorage.setItem('lists', JSON.stringify(lists));\n        break;\n      }\n    }\n  }\n\n  deleteType() {\n    var lists = this.state.lists;\n    var type = this.state.toDeleteType;\n    for (var i=0; i<lists.length; i++) {\n      if (lists[i]['type'] === type) {\n        lists.splice(i, 1);\n        this.setState({'lists': lists});\n        localStorage.setItem('lists', JSON.stringify(lists));\n        break;\n      }\n    }\n    this.setState({'isDisplayOverlay': false});\n  }\n\n  deleteItem() {\n    var lists = this.state.lists;\n    var type = this.state.toDeleteType;\n    var item = this.state.toDeleteItem;\n    for (var i=0; i<lists.length; i++) {\n      if (lists[i]['type'] === type) {\n        var items = lists[i]['items'];\n        for (var j=0; j<items.length; j++) {\n          if (items[j]['name'] === item ) {\n            items.splice(j, 1);\n            this.setState({'lists': lists});\n            localStorage.setItem('lists', JSON.stringify(lists));\n            break;\n          }\n        }\n      }\n    }\n    this.setState({'isDisplayOverlay': false, 'toDeleteItem': ''});\n  }\n\n  displayOverlay(isDisplayOverlay, type, item ='') {\n    this.setState({'isDisplayOverlay': isDisplayOverlay});\n    this.setState({'toDeleteType': type});\n    this.setState({'toDeleteItem': item});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className={ this.state.isDisplayOverlay ? 'disabled':'' } >\n          <header className=\"App-header\">\n            <h1 className=\"center\"><span className=\"border-bottom pad-hor\">Shopping List</span></h1>\n            <div id=\"dashboard\">\n              { this.state.lists.map((list, i) =>\n                <TypeBox key={i}list={list} type={list['type']} addTypeItem={this.addTypeItem} displayOverlay={this.displayOverlay} />\n              )}\n              <AddEditTypeBox addTypeList={this.addTypeList} newType={this.state.newType} />\n            </div>\n          </header>\n        </div>\n        { this.state.isDisplayOverlay && <DisplayOverlay displayOverlay={this.displayOverlay} deleteType={this.deleteType} deleteItem={this.deleteItem} type={this.state.toDeleteType} item={this.state.toDeleteItem} /> }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}